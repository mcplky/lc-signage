name: release

on:
  push:
    tags:
    # on v1.2.3 tag syntax
    - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in the format `v1.2.3`'
        required: true
        type: string

env:
  app_package_name: lc-signage
  app_binary_name: lc-signage
  app: lc-signage

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get version number from tag
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "${GITHUB_OUTPUT}"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}
      
  build:
    needs: 
      - get-version
    env:
      version: ${{ needs.get-version.outputs.version }}
    name: Build
    strategy:
      matrix:
        include:
          - platform: linux
            targets: x86_64-unknown-linux-gnu
            profile: release
            package_ext: .zip
            runner: ubuntu-latest

          - platform: windows
            targets: x86_64-pc-windows-msvc
            profile: release
            binary_ext: .exe
            package_ext: .zip
            runner: windows-latest
            
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Set up env
        run: |
          echo "app=tmp/app/${app_package_name}"'${{ matrix.app_suffix }}' >> "${GITHUB_ENV}"
          echo "package=${app_package_name}-"'${{ matrix.platform }}${{ matrix.package_ext }}' >> "${GITHUB_ENV}"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: ${{ env.git_lfs }}
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.targets }}
          
      - name: Populate cargo cache
        uses: Leafwing-Studios/cargo-cache@v2
        with:
          sweep-cache: true
          
      - name: Prepare output directories
        run: rm -rf tmp; mkdir -p tmp/binary '${{ env.app }}'
        
      - name: Build binaries
        run: |
          for target in ${{ matrix.targets}}; do
            cargo build --locked --profile='${{ matrix.profile }}' --target="${target}"
            mv target/"${target}"/'${{ matrix.profile }}/${{ env.app_package_name }}${{ matrix.binary_ext }}' tmp/binary/"${target}"'${{ matrix.binary_ext }}'
          done
          
      - name: Move binaries to app
        run: mv tmp/binary/*'${{ matrix.binary_ext }}' '${{ env.app }}/${{ env.app_binary_name }}${{ matrix.binary_ext }}'
        
      - name: Package app
        if: ${{ matrix.platform != 'windows' }}
        working-directory: tmp/app
        run: zip --recurse-paths '${{ env.package }}' '${{ env.app_package_name }}'

      - name: Package app (Windows)
        if: ${{ matrix.platform == 'windows' }}
        working-directory: tmp/app
        shell: pwsh
        run: Compress-Archive -Path '${{ env.app }}' -DestinationPath '${{ env.package }}'
        
      - name: Upload package to workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          path: tmp/app/${{ env.package }}
          name: package-${{ matrix.platform }}
          retention-days: 1
      - name: Upload package to Github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tmp/app/${{ env.package }}
          release_name: ${{ env.version }}
          tag: ${{ env.version }}
          overwrite: true
    
    
